# ===================================================================
# Spring Boot configuration.
#
# This configuration is used for unit/integration tests.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

spring:
  application:
    name: pagopaCruscottoBackend
  # Replace by 'prod, faker' to add the faker context and have sample data loaded in production
  cloud:
    aws:
      credentials:
        access-key: awsAccessKey
        secret-key: awsSecretKey
      region:
        static: awsRegion
  datasource:
    url: jdbc:h2:mem:pagopa_cruscotto;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    name:
    username:
    password:
  jpa:
    open-in-view: false
    properties:
      hibernate.jdbc.time_zone: Europe/Berlin
  jackson:
    serialization:
      write-durations-as-timestamps: false
  liquibase:
    contexts: test, ddl
    parameters:
      datetimeType: TIMESTAMP
  main:
    allow-bean-definition-overriding: true
  messages:
    basename: i18n/messages
  security:
    oauth2:
      resourceserver:
        jwt:
          authority-prefix: ''
          authorities-claim-name: auth
  task:
    execution:
      thread-name-prefix: pagopa-cruscotto-backend-task-
      pool:
        core-size: 1
        max-size: 50
        queue-capacity: 10000
    scheduling:
      thread-name-prefix: pagopa-cruscotto-backend-scheduling-
      pool:
        size: 20
  thymeleaf:
    mode: HTML
  quartz:
    job-store-type: memory
    properties:
      org.quartz.scheduler.instanceName: PagoPaCruscottoScheduler
      org.quartz.scheduler.instanceId: AUTO
      org.quartz.threadPool.threadCount: 10
      org.quartz.plugin.shutdownHook.class: org.quartz.plugins.management.ShutdownHookPlugin
      org.quartz.plugin.shutdownHook.cleanShutdown: true
      org.quartz.scheduler.batchTriggerAcquisitionMaxCount: 6
      org.quartz.plugin.triggerHistory.class: 'org.quartz.plugins.history.LoggingTriggerHistoryPlugin'
      org.quartz.plugin.triggerHistory.triggerFiredMessage: 'Trigger [{1}.{0}] fired job [{6}.{5}] scheduled at: {2, date, dd-MM-yyyy HH:mm:ss.SSS}, next scheduled at: {3, date, dd-MM-yyyy HH:mm:ss.SSS}'
      org.quartz.plugin.triggerHistory.triggerCompleteMessage: 'Trigger [{1}.{0}] completed firing job [{6}.{5}] with resulting trigger instruction code: {9}. Next scheduled at: {3, date, dd-MM-yyyy HH:mm:ss.SSS}'
      org.quartz.plugin.triggerHistory.triggerMisfiredMessage: 'Trigger [{1}.{0}] misfired job [{6}.{5}]. Should have fired at: {3, date, dd-MM-yyyy HH:mm:ss.SSS}'
      org.quartz.plugin.jobHistory.class: 'org.quartz.plugins.history.LoggingJobHistoryPlugin'
      org.quartz.plugin.jobHistory.jobToBeFiredMessage: 'Job [{1}.{0}] to be fired by trigger [{4}.{3}], re-fire: {7}'
      org.quartz.plugin.jobHistory.jobSuccessMessage: 'Job [{1}.{0}] execution complete and reports: {8}'
      org.quartz.plugin.jobHistory.jobFailedMessage: 'Job [{1}.{0}] execution failed with exception: {8}'
      org.quartz.plugin.jobHistory.jobWasVetoedMessage: 'Job [{1}.{0}] was vetoed. It was to be fired by trigger [{4}.{3}] at: {2, date, dd-MM-yyyy HH:mm:ss.SSS}'

server:
  port: 10344
  address: localhost

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================
jhipster:
  clientApp:
    name: 'pagopaCruscottoBackendApp'
  logging:
    # To test json console appender
    use-json-format: false
    logstash:
      enabled: false
      host: localhost
      port: 5000
      ring-buffer-size: 512
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 (you can type `echo 'secret-key'|base64` on your command line)
        base64-secret: NTI0NDVjYmE1MTE2ZDdhMDc2MGZhMDNjNTQ0OGM1YmEwYzc5MjUyNjFmYzQ0YjliMDI3ODBjMTQwMjc0NDMxYTY4NTNlZjE2YjBlMTUyMjIyMjVmY2M4ODJjYzE3NTM3MjRkYzQzOWJiMjVlMGM4ZWQ1YTdjOThlNDFmNDc3NjA=
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 86400

# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:
management:
  health:
    mail:
      enabled: false

application:
  mail:
    base-url: http://127.0.0.1:8080
  aws:
    ses:
      user: awsSesUser
  enable-csrf: false
  quartz:
    expose-scheduler-in-repository: false
    active-db-log: true
  password:
    day-password-expired: 60
    failed-login-attempts: 4
    hours-key-reset-password-expired: 1
  pago-pa-client:
    proxy-host:
    proxy-port:
    taxonomy:
      url: https://api.platform.pagopa.it/taxonomy/service/v1
    back-office:
      url: https://api.dev.platform.pagopa.it/backoffice/helpdesk/v1
      api-key-name: ocp-apim-subscription-key
      api-key-value: df10628ae8044fdfabd6bbbdc71bdc26
    cache:
      url: https://api.dev.platform.pagopa.it/api-config-cache/p/v1
      api-key-name: ocp-apim-subscription-key
      api-key-value: 52f2f22cf8f94544baf9bfd2760f3dbd
    stand-in:
      url: https://api.dev.platform.pagopa.it/technical-support/stand-in/api/v1
      api-key-name: ocp-apim-subscription-key
      api-key-value: b7e8c50e8f9b4a1d8a1e8f2c8b1a4e6f
  job:
    load-taxonomy-job:
      enabled: true
      cron: 0 0/50 07-8 ? * SAT *
    load-maintenance-job:
      enabled: true
      cron: 0 0/50 07-8 ? * SAT *
    load-registry-job:
      enabled: true
      cron: 0 0/50 0-23 ? * SAT *
    kpi-a1-job:
      enabled: true
      cron: 0 0/2 0-23 ? * MON,TUE,WED,THU,FRI,SAT,SUN *
      limit: 20
    kpi-a2-job:
      enabled: true
      cron: 0 0/2 0-23 ? * MON,TUE,WED,THU,FRI,SAT,SUN *
      limit: 20
    kpi-b2-job:
      enabled: true
      cron: 0 0/2 0-23 ? * MON,TUE,WED,THU,FRI,SAT,SUN *
      limit: 20
    kpi-b9-job:
      enabled: true
      cron: 0 0/2 0-23 ? * MON,TUE,WED,THU,FRI,SAT,SUN *
      limit: 20
    kpi-b3-job:
      enabled: true
      cron: 0 0/2 0-23 ? * MON,TUE,WED,THU,FRI,SAT,SUN *
      limit: 20
    kpi-b4-job:
      enabled: true
      cron: 0 0/2 0-23 ? * MON,TUE,WED,THU,FRI,SAT,SUN *
      limit: 20
    kpi-b5-job:
      enabled: true
      cron: 0 0/2 0-23 ? * MON,TUE,WED,THU,FRI,SAT,SUN *
      limit: 20
    kpi-b1-job:
      enabled: true
      cron: 0 0/2 08-23 ? * MON,TUE,WED,THU,FRI,SAT,SUN *
      limit: 20
    kpi-b8-job:
      enabled: true
      cron: 0 0/2 08-23 ? * MON,TUE,WED,THU,FRI,SAT,SUN *
      limit: 20
    kpi-c1-job:
      enabled: false
      cron: 0 0/2 08-23 ? * MON,TUE,WED,THU,FRI,SAT,SUN *
      limit: 20
    clear-log-job:
      cron: 0 0/20 05-6 ? * MON,TUE,WED,THU,FRI,SAT,SUN *
      days: 7

  liquibase:
    async-start: false
    dbVersion: 1.1.11

decorator:
  datasource:
    p6spy:
      enable-logging: false
